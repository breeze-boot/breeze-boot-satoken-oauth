/*
 * Copyright (c) ${year}, gaoweixuan (breeze-cloud@foxmail.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ${packageName}.${module}.service.impl;

import com.baomidou.mybatisplus.extension.conditions.query.LambdaQueryChainWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.breeze.boot.core.utils.Result;
import com.breeze.boot.${module}.mapper.${entityClassName}Mapper;
import com.breeze.boot.${module}.model.entity.${entityClassName};
import com.breeze.boot.${module}.model.form.${entityClassName}Form;
import com.breeze.boot.${module}.model.converter.${entityClassName}Converter;
import com.breeze.boot.${module}.model.query.${entityClassName}Query;
import com.breeze.boot.${module}.model.vo.${entityClassName}VO;
import com.breeze.boot.${module}.service.${entityClassName}Service;
import com.breeze.boot.mybatis.annotation.ConditionParam;
import com.breeze.boot.mybatis.annotation.DymicSql;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * ${entityClassNameComment} impl
 *
 * @author gaoweixuan
 * @since ${date}
 */
@Service
@RequiredArgsConstructor
public class ${entityClassName}ServiceImpl extends ServiceImpl<${entityClassName}Mapper, ${entityClassName}> implements ${entityClassName}Service {

    private final ${entityClassName}Converter ${entityClassLowerName}Converter;

    /**
     * 列表页面
     *
     * @param query ${entityClassNameComment}查询
     * @return {@link Page}<{@link ${entityClassName}VO }>
     */
    @Override
    @DymicSql
    public Page<${entityClassName}VO> listPage(@ConditionParam ${entityClassName}Query query) {
        Page<${entityClassName}> page = new Page<>(query.getCurrent(), query.getSize());
        Page<${entityClassName}> ${entityClassLowerName}Page = new LambdaQueryChainWrapper<>(this.getBaseMapper())
                    .orderByDesc(${entityClassName}::getCreateTime)
                    .page(page);
        return this.${entityClassLowerName}Converter.page2VOPage(${entityClassLowerName}Page);
    }

    /**
     * 按id获取信息
     *
     * @param ${entityClassLowerName}Id ${entityClassNameComment} id
     * @return {@link ${entityClassName}VO }
     */
    @Override
    public ${entityClassName}VO getInfoById(Long ${entityClassLowerName}Id) {
        return this.${entityClassLowerName}Converter.entity2VO(this.getById(${entityClassLowerName}Id));
    }

    /**
     * 保存${entityClassNameComment}
     *
     * @param form 平台表单
     * @return {@link Boolean }
     */
    @Override
    public Boolean save${entityClassName}(${entityClassName}Form form) {
        return this.save(${entityClassLowerName}Converter.form2Entity(form));
    }

    /**
     * 修改${entityClassNameComment}
     *
     * @param ${entityClassLowerName}Id ${entityClassNameComment}ID
     * @param form ${entityClassNameComment}表单
     * @return {@link Boolean }
     */
    @Override
    public Boolean modify${entityClassName}(Long ${entityClassLowerName}Id, ${entityClassName}Form form) {
        ${entityClassName} ${entityClassLowerName} = this.${entityClassLowerName}Converter.form2Entity(form);
        ${entityClassLowerName}.setId(${entityClassLowerName}Id);
        return this.updateById(${entityClassLowerName});
    }

    /**
     * 通过IDS删除${entityClassNameComment}
     *
     * @param ids ids
     * @return {@link Result}<{@link Boolean }>
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public Result<Boolean> remove${entityClassName}ByIds(List<Long> ids) {
        return Result.ok(this.removeByIds(ids));
    }

}